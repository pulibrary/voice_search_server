// This module is responsible for extracting MEL features from
// PCM samples.

use candle_transformers::models::whisper::{audio, Config};
use anyhow::{Result};

use crate::whisper;

pub fn extract_features(samples: Vec<f32>) -> Result<Vec<f32>, anyhow::Error> {
    let config: Config = serde_json::from_str(&std::fs::read_to_string(whisper::download().unwrap().config_filename).unwrap())?;

    let mel_bytes = match config.num_mel_bins {
        80 => include_bytes!("./melfilters.bytes").as_slice(),
        128 => include_bytes!("./melfilters128.bytes").as_slice(),
        nmel => anyhow::bail!("unexpected num_mel_bins {nmel}"),
    };
    let mut mel_filters = vec![0f32; mel_bytes.len() / 4];
    <byteorder::LittleEndian as byteorder::ByteOrder>::read_f32_into(mel_bytes, &mut mel_filters);

    Ok(audio::pcm_to_mel(&config, &samples, &mel_filters))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_can_extract_features() {
        let original = vec![5.4436393e-11, 5.4436393e-11, 5.7148936e-10, 5.7148936e-10, 2.040187e-9, 2.040187e-9, 4.9623825e-9, 4.9623825e-9, 9.84147e-9, 9.841413, 0.00039573782, 0.00039573782, 0.00041899766, 0.00041899766, 0.00042206887, 0.00042206887, 0.00042019508, 0.00042019508, 0.00043621912, 0.00043621912, 0.00044048374, 0.00044048374, 0.00042628907, 0.00042628907, 0.00040913056, 0.00040913056, 0.00041894428, 0.00041894428, 0.00041883925, 0.00041883925, 0.00039301533, 0.00039301533, 0.00039165904, 0.00039165904, 0.0003886064, 0.0003886064, 0.00038134333, 0.00038134333, 0.0003644231, 0.0003644231, 0.00032480664, 0.00032480664, 0.00030603568, 0.00030603568, 0.0002882394, 0.0002882394, 0.00027830666, 0.00027830666, 0.0002827809, 0.0002827809, 0.0002513537, 0.0002513537, 0.00021580327, 0.00021580327, 0.00019734507, 0.00019734507, 0.00016390247, 0.00016390247, 0.00012249581, 0.00012249581, 7.688883e-5, 7.688883e-5, 2.685903e-5, 2.685903e-5, -1.898994e-6, -1.898994e-6, -2.662608e-5, -2.662608e-5, -7.2695046e-5, -7.2695046e-5, -0.0001271194, -0.0001271194, -0.00017653764, -0.00017653764, -0.00019770292, -0.00019770292, -0.000218551, -0.000218551, -0.00026197752, -0.00026197752, -0.0002861552, -0.0002861552, -0.00029543537, -0.00029543537, -0.00030630213, -0.00030630213, -0.00031896034, -0.00031896034, -0.00034137224, -0.00034137224, -0.00036314782, -0.00036314782, -0.00037013675, -0.00037013675, -0.00039932, -0.00039932, -0.00046411873, -0.00046411873, -0.00049104716, -0.00049104716, -0.00049793115, -0.00049793115, -0.00052282587, -0.00052282587, -0.00054232456, -0.00054232456, -0.00056779385, -0.00056779385, -0.00059352955, -0.00059352955, -0.0006400818, -0.0006400818, -0.0006829452, -0.0006829452, -0.000705184, -0.000705184, -0.0007427568, -0.0007427568, -0.00073127466, -0.00073127466, -0.0006985722, -0.0006985722, -0.0006877723, -0.0006877723, -0.00067495485, -0.00067495485, -0.0006948794, -0.0006948794, -0.00070477056, -0.00070477056, -0.0007059259, -0.0007059259, -0.00073023187, -0.00073023187, -0.00071839825, -0.00071839825, -0.00069304975, -0.00069304975, -0.00070726674, -0.00070726674, -0.00071602676, -0.00071602676, -0.0006975423, -0.0006975423, -0.0007037022, -0.0007037022, -0.00070441834, -0.00070441834, -0.0006855369, -0.0006855369, -0.00069798547, -0.00069798547, -0.0007195922, -0.0007195922, -0.0007418401, -0.0007418401, -0.00074493117, -0.00074493117, -0.0007501374, -0.0007501374, -0.0007976255, -0.0007976255, -0.0008246999, -0.0008246999, -0.00084858626, -0.00084858626, -0.0008782728, -0.0008782728, -0.00090048247, -0.00090048247, -0.0009575776, -0.0009575776, -0.0009963977, -0.0009963977, -0.0010043095, -0.0010043095, -0.0010190161, -0.0010190161, -0.001047547, -0.001047547, -0.0011004187, -0.0011004187, -0.0011191708, -0.0011191708, -0.0010912125, -0.0010912125, -0.0010735859, -0.0010735859, -0.0010646931, -0.0010646931, -0.0010485655, -0.0010485655, -0.0010211065, -0.0010211065, -0.0009979163, -0.0009979163, -0.0009994151, -0.0009994151, -0.0009938888, -0.0009938888, -0.00097240903, -0.00097240903, -0.00094299973, -0.00094299973, -0.00089000305, -0.00089000305, -0.0008626109, -0.0008626109, -0.00085678516, -0.00085678516, -0.00081617356, -0.00081617356, -0.000791065, -0.000791065, -0.00079253037, -0.00079253037, -0.0007773633, -0.0007773633, -0.00073579676, -0.00073579676, -0.0006766536, -0.0006766536, -0.0006500836, -0.0006500836, -0.00065352285, -0.00065352285, -0.0006225663, -0.0006225663, -0.00055438664, -0.00055438664, -0.00053062773, -0.00053062773, -0.0005626144, -0.0005626144, -0.0005716592, -0.0005716592, -0.00056606275, -0.00056606275, -0.0005507644, -0.0005507644, -0.00053466693, -0.00053466693, -0.00056092464, -0.00056092464, -0.0005640447, -0.0005640447, -0.0005320626, -0.0005320626, -0.00051772204, -0.00051772204, -0.00052930834, -0.00052930834, -0.0005610229, -0.0005610229, -0.0005637732, -0.0005637732, -0.0005355806, -0.0005355806, -0.00052381266, -0.00052381266, -0.0005550945, -0.0005550945, -0.000595865, -0.000595865, -0.00059466483, -0.00059466483];

        // A small set of samples becomes a huge number of features!
        assert!(original.len() < 300);
        assert!(extract_features(original).unwrap().len() > 300_000);
    }
}
